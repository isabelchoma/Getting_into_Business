knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Check the first few rows of the dataset
head(data)
# Check the last few rows of the dataset
tail(data)
knitr::opts_chunk$set(echo = TRUE)
# Define the URL of the dataset
url <- "https://www.kaggle.com/api/v1/datasets/download/fratzcan/usa-house-prices"
# Define the path to save the downloaded file (you can modify the path as needed)
save_path <- "~/Downloads/usa-house-prices.zip"
# Download the dataset
download.file(url, destfile = save_path, method = "curl")
# Print message once the file is downloaded
cat("Dataset downloaded to:", save_path)
getwd()
knitr::opts_chunk$set(echo = TRUE)
# Define the URL of the dataset
url <- "https://www.kaggle.com/api/v1/datasets/download/fratzcan/usa-house-prices"
# Define the path to save the downloaded file (you can modify the path as needed)
save_path <- "~/Downloads/usa-house-prices.zip"
# Download the dataset
download.file(url, destfile = save_path, method = "curl")
# Print message once the file is downloaded
cat("Dataset downloaded to:", save_path)
knitr::opts_chunk$set(echo = TRUE)
# Define the URL of the dataset
url <- "https://www.kaggle.com/api/v1/datasets/download/fratzcan/usa-house-prices"
# Define the path to save the downloaded file (you can modify the path as needed)
save_path <- "~/usa-house-prices.zip"
# Download the dataset
download.file(url, destfile = save_path, method = "curl")
# Print message once the file is downloaded
cat("Dataset downloaded to:", save_path)
# Define the URL of the dataset
url <- "https://www.kaggle.com/api/v1/datasets/download/fratzcan/usa-house-prices"
# Define the path to save the downloaded file (you can modify the path as needed)
save_path <- "./usa-house-prices.zip"
# Download the dataset
download.file(url, destfile = save_path, method = "curl")
# Print message once the file is downloaded
cat("Dataset downloaded to:", save_path)
# Define the URL of the dataset
url <- "https://www.kaggle.com/api/v1/datasets/download/fratzcan/usa-house-prices"
# Define the path to save the downloaded file (you can modify the path as needed)
save_path <- "./usa-house-prices.zip"
# Define the directory to extract the dataset (you can modify the path as needed)
extracted_dir <- "./usa-house-prices/"
# Check if the zip file already exists
if (!file.exists(save_path)) {
# Download the dataset if it's not already downloaded
download.file(url, destfile = save_path, method = "curl")
cat("Dataset downloaded to:", save_path, "\n")
} else {
cat("Dataset already downloaded, skipping download.\n")
}
# Check if the file is already extracted
if (!dir.exists(extracted_dir)) {
# Decompress the zip file if it hasn't been extracted already
unzip(save_path, exdir = extracted_dir)
cat("Dataset extracted to:", extracted_dir, "\n")
} else {
cat("Dataset already extracted, skipping extraction.\n")
}
# Define the URL of the dataset
url <- "https://www.kaggle.com/api/v1/datasets/download/fratzcan/usa-house-prices"
# Define the path to save the downloaded file (you can modify the path as needed)
save_path <- "./usa-house-prices.zip"
# Define the directory to extract the dataset (you can modify the path as needed)
extracted_dir <- "./usa-house-prices/"
# Check if the zip file already exists
if (!file.exists(save_path)) {
# Download the dataset if it's not already downloaded
download.file(url, destfile = save_path, method = "curl")
cat("Dataset downloaded to:", save_path, "\n")
} else {
cat("Dataset already downloaded, skipping download.\n")
}
# Check if the file is already extracted
if (!dir.exists(extracted_dir)) {
# Decompress the zip file if it hasn't been extracted already
unzip(save_path, exdir = extracted_dir)
cat("Dataset extracted to:", extracted_dir, "\n")
} else {
cat("Dataset already extracted, skipping extraction.\n")
}
# Define the URL of the dataset
url <- "https://www.kaggle.com/api/v1/datasets/download/fratzcan/usa-house-prices"
# Define the path to save the downloaded file (you can modify the path as needed)
save_path <- "./usa-house-prices.zip"
# Define the directory to extract the dataset (you can modify the path as needed)
extracted_dir <- "./usa-house-prices/"
# Check if the zip file already exists
if (!file.exists(save_path)) {
# Download the dataset if it's not already downloaded
download.file(url, destfile = save_path, method = "curl")
cat("Dataset downloaded to:", save_path, "\n")
} else {
cat("Dataset already downloaded, skipping download.\n")
}
# Check if the file is already extracted
if (!dir.exists(extracted_dir)) {
# Decompress the zip file if it hasn't been extracted already
unzip(save_path, exdir = extracted_dir)
cat("Dataset extracted to:", extracted_dir, "\n")
} else {
cat("Dataset already extracted, skipping extraction.\n")
}
# Define the URL of the dataset
url <- "https://www.kaggle.com/api/v1/datasets/download/fratzcan/usa-house-prices"
# Define the destination file path (you can change this)
destination_file <- "usa-house-prices.zip"
# Download the dataset
download.file(dataset_url, destfile = destination_file, mode = "wb")
# Define the URL of the dataset
url <- "https://www.kaggle.com/api/v1/datasets/download/fratzcan/usa-house-prices"
# Define the destination file path (you can change this)
destination_file <- "usa-house-prices.zip"
# Download the dataset
download.file(url, destfile = destination_file, mode = "wb")
# Confirm download
print("Download complete!")
# Extract the dataset
unzip(destination_file, exdir = "usa-house-prices")
# List extracted files
list.files("usa-house-prices")
# Define the URL of the dataset
url <- "https://www.kaggle.com/api/v1/datasets/download/fratzcan/usa-house-prices"
# Define the destination file path (you can change this)
destination_file <- "usa-house-prices.zip"
# Check if the file is already downloaded
if (!file.exists(destination_file)) {
# Download the dataset if it's not already downloaded
download.file(url, destfile = destination_file, mode = "wb")
print("Download complete!")
} else {
print("File already downloaded, skipping download.")
}
# Check if the dataset is already extracted
if (!dir.exists(extracted_dir) || length(list.files(extracted_dir)) == 0) {
# Extract the dataset if it's not already extracted
unzip(destination_file, exdir = extracted_dir)
print("Dataset extracted!")
} else {
print("Dataset already extracted, skipping extraction.")
}
# List the files in the extracted directory
list.files(extracted_dir)
